package main

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
	"syscall/js"
	"time"
)

const (
	isWasm bool = true
)

type WasmStats struct {
	setDataCalls int
	setDataTime time.Time
}

var game *Game
var wasmStats *WasmStats

func main() {
	setGlobals()
	setGameAPI()
	fmt.Println("WebAssembly loaded!")

    <-make(chan bool)
}

func setGlobals() {
	js.Global().Set("frameMillis", frameMillis)
	js.Global().Set("wasmVersion", gameVersion)

	js.Global().Set("leftCardinal", int(leftCardinal))
	js.Global().Set("rightCardinal", int(rightCardinal))
	js.Global().Set("bottomCardinal", int(bottomCardinal))
	js.Global().Set("topCardinal", int(topCardinal))
	js.Global().Set("bottomLeftCardinal", int(bottomLeftCardinal))
	js.Global().Set("bottomRightCardinal", int(bottomRightCardinal))
	js.Global().Set("topLeftCardinal", int(topLeftCardinal))
	js.Global().Set("topRightCardinal", int(topRightCardinal))

	js.Global().Set("pingType", int(pingType))
	js.Global().Set("candidateType", int(candidateType))
	js.Global().Set("offerType", int(offerType))
	js.Global().Set("answerType", int(answerType))
	js.Global().Set("voiceCandidateType", int(voiceCandidateType))

	js.Global().Set("voiceOfferType", int(voiceOfferType))
	js.Global().Set("voiceAnswerType", int(voiceAnswerType))
	js.Global().Set("initType", int(initType))
	js.Global().Set("joinType", int(joinType))
	js.Global().Set("leftType", int(leftType))

	js.Global().Set("initVoiceType", int(initVoiceType))
	js.Global().Set("joinVoiceType", int(joinVoiceType))
	js.Global().Set("leftVoiceType", int(leftVoiceType))
	js.Global().Set("chatType", int(chatType))
	js.Global().Set("keyType", int(keyType))

	js.Global().Set("objectDataType", int(objectDataType))
	js.Global().Set("objectUpdateType", int(objectUpdateType))
	js.Global().Set("playerInitType", int(playerInitType))
	js.Global().Set("levelInitType", int(levelInitType))

	js.Global().Set("lobbyGameState", int(lobbyGameState))
	js.Global().Set("activeGameState", int(activeGameState))
	js.Global().Set("victoryGameState", int(victoryGameState))

	js.Global().Set("playerSpace", int(playerSpace))
	js.Global().Set("mainBlockSpace", int(mainBlockSpace))
	js.Global().Set("balconyBlockSpace", int(balconyBlockSpace))
	js.Global().Set("roofBlockSpace", int(roofBlockSpace))
	js.Global().Set("wallSpace", int(wallSpace))
	js.Global().Set("lightSpace", int(lightSpace))
	js.Global().Set("explosionSpace", int(explosionSpace))
	js.Global().Set("equipSpace", int(equipSpace))
	js.Global().Set("weaponSpace", int(weaponSpace))
	js.Global().Set("bombSpace", int(bombSpace))
	js.Global().Set("pelletSpace", int(pelletSpace))
	js.Global().Set("boltSpace", int(boltSpace))
	js.Global().Set("rocketSpace", int(rocketSpace))
	js.Global().Set("starSpace", int(starSpace))
	js.Global().Set("grapplingHookSpace", int(grapplingHookSpace))
	js.Global().Set("pickupSpace", int(pickupSpace))
	js.Global().Set("portalSpace", int(portalSpace))
	js.Global().Set("goalSpace", int(goalSpace))
	js.Global().Set("spawnSpace", int(spawnSpace))

	js.Global().Set("attributesProp", int(attributesProp))
	js.Global().Set("byteAttributesProp", int(byteAttributesProp))
	js.Global().Set("intAttributesProp", int(intAttributesProp))
	js.Global().Set("floatAttributesProp", int(floatAttributesProp))
	js.Global().Set("nameProp", int(nameProp))

	js.Global().Set("dimProp", int(dimProp))
	js.Global().Set("posProp", int(posProp))
	js.Global().Set("velProp", int(velProp))
	js.Global().Set("accProp", int(accProp))
	js.Global().Set("jerkProp", int(jerkProp))
	js.Global().Set("dirProp", int(dirProp))
	js.Global().Set("keysProp", int(keysProp))
	js.Global().Set("ownerProp", int(ownerProp))
	js.Global().Set("targetProp", int(targetProp))
	js.Global().Set("stateProp", int(stateProp))
	js.Global().Set("scoreProp", int(scoreProp))

	js.Global().Set("initializedAttribute", int(initializedAttribute))
	js.Global().Set("deletedAttribute", int(deletedAttribute))
	js.Global().Set("attachedAttribute", int(attachedAttribute))
	js.Global().Set("chargingAttribute", int(chargingAttribute))
	js.Global().Set("chargedAttribute", int(chargedAttribute))
	js.Global().Set("canJumpAttribute", int(canJumpAttribute))
	js.Global().Set("canDoubleJumpAttribute", int(canDoubleJumpAttribute))
	js.Global().Set("dashingAttribute", int(dashingAttribute))
	js.Global().Set("deadAttribute", int(deadAttribute))
	js.Global().Set("visibleAttribute", int(visibleAttribute))
	js.Global().Set("vipAttribute", int(vipAttribute))
	js.Global().Set("autoRespawnAttribute", int(autoRespawnAttribute))

	js.Global().Set("typeByteAttribute", int(typeByteAttribute))
	js.Global().Set("subtypeByteAttribute", int(subtypeByteAttribute))
	js.Global().Set("stateByteAttribute", int(stateByteAttribute))
	js.Global().Set("teamByteAttribute", int(teamByteAttribute))
	js.Global().Set("openingByteAttribute", int(openingByteAttribute))
	js.Global().Set("healthByteAttribute", int(healthByteAttribute))
	js.Global().Set("juiceByteAttribute", int(juiceByteAttribute))

	js.Global().Set("colorIntAttribute", int(colorIntAttribute))
	js.Global().Set("secondaryColorIntAttribute", int(secondaryColorIntAttribute))
	js.Global().Set("killIntAttribute", int(killIntAttribute))
	js.Global().Set("deathIntAttribute", int(deathIntAttribute))

	js.Global().Set("posZFloatAttribute", int(posZFloatAttribute))
	js.Global().Set("dimZFloatAttribute", int(dimZFloatAttribute))
	js.Global().Set("intensityFloatAttribute", int(intensityFloatAttribute))
	js.Global().Set("distanceFloatAttribute", int(distanceFloatAttribute))
	js.Global().Set("fovFloatAttribute", int(fovFloatAttribute))

	js.Global().Set("redTeam", int(redTeam))
	js.Global().Set("blueTeam", int(blueTeam))

	js.Global().Set("pointLight", int(pointLight))
	js.Global().Set("spotLight", int(spotLight))
	js.Global().Set("floorLight", int(floorLight))

	js.Global().Set("uziWeapon", int(uziWeapon))
	js.Global().Set("grapplingHookWeapon", int(grapplingHookWeapon))
	js.Global().Set("bazookaWeapon", int(bazookaWeapon))
	js.Global().Set("sniperWeapon", int(sniperWeapon))
	js.Global().Set("starWeapon", int(starWeapon))
	js.Global().Set("boosterEquip", int(boosterEquip))
	js.Global().Set("chargerEquip", int(chargerEquip))
	js.Global().Set("jetpackEquip", int(jetpackEquip))

	js.Global().Set("readyPartState", int(readyPartState))
	js.Global().Set("activePartState", int(activePartState))
	js.Global().Set("rechargingPartState", int(rechargingPartState))

	js.Global().Set("platformWall", int(platformWall))
	js.Global().Set("stairWall", int(stairWall))
	js.Global().Set("tableWallSubtype", int(tableWallSubtype))

	js.Global().Set("archBlock", int(archBlock))

	js.Global().Set("upKey", int(upKey))
	js.Global().Set("downKey", int(downKey))
	js.Global().Set("leftKey", int(leftKey))
	js.Global().Set("rightKey", int(rightKey))
	js.Global().Set("jumpKey", int(jumpKey))
	js.Global().Set("interactKey", int(interactKey))
	js.Global().Set("mouseClick", int(mouseClick))
	js.Global().Set("altMouseClick", int(altMouseClick))
}

func setGameAPI() {
	reset()

	js.Global().Set("wasmReset", Reset())
	js.Global().Set("wasmAdd", Add())
	js.Global().Set("wasmHas", Has())
	js.Global().Set("wasmDelete", Delete())
	js.Global().Set("wasmUpdateKeys", UpdateKeys())
	js.Global().Set("wasmGetData", GetData())
	js.Global().Set("wasmSetData", SetData())
	js.Global().Set("wasmLoadLevel", LoadLevel())
	js.Global().Set("wasmUpdate", Update())
	js.Global().Set("wasmGetStats", GetStats())
}

func Reset() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
    	reset()
		return nil
    })
}

func reset() {
	game = NewGame()
	wasmStats = &WasmStats{
		setDataCalls: 0,
		setDataTime: time.Now(),
	}
}

func Add() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 3 {
			fmt.Println("Add: Expected 3 argument(s), got ", len(args))
			return nil
		}

		space := SpaceType(args[0].Int())
		id := IdType(args[1].Int())
		data := getData(args[2])

		init := NewInit(Id(space, id), data.Get(posProp).(Vec2), data.Get(dimProp).(Vec2))
		object := game.Add(init)
		if object == nil {
			fmt.Println("Add: failed to create object ", space, id)
			return nil
		}

		object.SetData(data)
		return nil
    })
}

func Has() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("Has: Expected 2 argument(s), got ", len(args))
			return nil
		}

		space := SpaceType(args[0].Int())
		id := IdType(args[1].Int())

		return game.Has(Id(space, id))
    })
}

func Delete() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("Delete: Expected 2 argument(s), got ", len(args))
			return nil
		}

		space := SpaceType(args[0].Int())
		id := IdType(args[1].Int())
		game.Delete(Id(space, id))

		return nil
    })
}

func UpdateKeys() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("UpdateKeys: Expected 2 argument(s), got ", len(args))
			return nil
		}

		id := IdType(args[0].Int())
		if !game.Has(Id(playerSpace, id)) {
			fmt.Println("UpdateKeys: Player does not exist: ", id)
			return nil
		}

		m, mOk := parseVec2(args[1].Get("M"))
		if !mOk {
			fmt.Println("UpdateKeys: failed to parse M vector")
			return nil
		}
		d, dOk := parseVec2(args[1].Get("D"))
		if !dOk {
			fmt.Println("UpdateKeys: failed to parse D vector")
			return nil
		}

		keyMsg := KeyMsg {
			S: SeqNumType(args[1].Get("S").Int()),
			K: parseKeysAsArray(args[1].Get("K").String()),
			M: m,
			D: d,
		}

		game.ProcessKeyMsg(id, keyMsg)
		return nil
    })
}

func GetData() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("GetData: Expected 2 argument(s), got ", len(args))
			return nil
		}

		space := SpaceType(args[0].Int())
		id := IdType(args[1].Int())
		if !game.Has(Id(space, id)) {
			fmt.Println("GetData: Object does not exist: ", space, id)
			return nil
		}
		data := game.GetData(Id(space, id)).Props()
		b, err := json.Marshal(data)
		if err != nil {
			fmt.Println("GetData: ", err)
			fmt.Println("data: ", data)
		}
		return string(b)
    })
}

func SetData() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 3 {
			fmt.Println("SetData: Expected 3 argument(s), got ", len(args))
			return nil
		}

		wasmStats.setDataCalls += 1

		space := SpaceType(args[0].Int())
		id := IdType(args[1].Int())
		if !game.Has(Id(space, id)) {
			return nil
		}

		data := getData(args[2])
		if (data.Size() == 0) {
			return nil
		}

		game.SetData(Id(space, id), data)
		return nil
    })
}

func LoadLevel() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("LoadLevel: Expected 2 argument(s), got ", len(args))
			return nil
		}

		level := LevelIdType(args[0].Int())
		seed := LevelSeedType(args[1].Int())
		game.LoadLevel(level, seed)

		objects := game.createLevelObjectInitMsg()
		b, err := json.Marshal(objects)
		if err != nil {
			fmt.Println("LoadLevel: ", err)
			fmt.Println("objects: ", objects)
			return ""
		}
		return string(b)
	})
}

func Update() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		game.Update()
		state := game.createObjectDataMsg()
		b, err := json.Marshal(state)
		if err != nil {
			fmt.Println("Update: ", err)
			fmt.Println("state: ", state)
			return ""
		}
		return string(b)
    })
}

func GetStats() js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
    	now := time.Now()

    	var sb strings.Builder
    	{
    		dur := now.Sub(wasmStats.setDataTime)
    		if dur > 0 {
    			setData := float64(wasmStats.setDataCalls) / (float64(dur) / float64(time.Second))
    			sb.WriteString(fmt.Sprintf("%.0f", setData))
    		}

    		wasmStats.setDataCalls = 0
    		wasmStats.setDataTime = time.Now()
    	}

    	return sb.String()
    })
}

func getData(data js.Value) Data {
	var prop js.Value
	var ok bool
	d := NewData()

	if prop, ok = getPropData(data, attributesProp); ok {
		d.Set(attributesProp, parseAttributesAsProp(prop.String()))
	}

	if prop, ok = getPropData(data, byteAttributesProp); ok {
		d.Set(byteAttributesProp, parseByteAttributesAsProp(prop.String()))
	}

	if prop, ok = getPropData(data, intAttributesProp); ok {
		d.Set(intAttributesProp, parseIntAttributesAsProp(prop.String()))
	}

	if prop, ok = getPropData(data, floatAttributesProp); ok {
		d.Set(floatAttributesProp, parseFloatAttributesAsProp(prop.String()))
	}

	if prop, ok = getPropData(data, dimProp); ok {
		if vec, vecOk := parseVec2(prop); vecOk {
			d.Set(dimProp, vec)
		}
	}

	if prop, ok = getPropData(data, posProp); ok {
		if vec, vecOk := parseVec2(prop); vecOk {
			d.Set(posProp, vec)
		}
	}

	if prop, ok = getPropData(data, velProp); ok {
		if vec, vecOk := parseVec2(prop); vecOk {
			d.Set(velProp, vec)
		}
	}

	if prop, ok = getPropData(data, accProp); ok {
		if vec, vecOk := parseVec2(prop); vecOk {
			d.Set(accProp, vec)
		}
	}

	// TODO: not needed?
	if prop, ok = getPropData(data, jerkProp); ok {
		if vec, vecOk := parseVec2(prop); vecOk {
			d.Set(jerkProp, vec)
		}
	}

	if prop, ok = getPropData(data, dirProp); ok {
		if vec, vecOk := parseVec2(prop); vecOk {
			d.Set(dirProp, vec)
		}
	}

	if prop, ok = getPropData(data, keysProp); ok {
		d.Set(keysProp, parseKeysAsProp(prop.String()))
	}

	if prop, ok = getPropData(data, ownerProp); ok {
		if sid, sidOk := parseSpacedId(prop); sidOk {
			d.Set(ownerProp, sid)
		}
	}

	return d
}

func getPropData(data js.Value, prop Prop) (js.Value, bool) {
	stringKey := strconv.Itoa(int(prop))
	propData := data.Get(stringKey)
	if propData.IsNull() || propData.IsNaN() || propData.IsUndefined() {
		return propData, false
	}
	return propData, true
}

func parseSpacedId(sid js.Value) (SpacedId, bool) {
	space := sid.Get("S")
	id := sid.Get("Id")

	if space.IsNull() || space.IsNaN() || space.IsUndefined() {
		return InvalidId(), false
	}
	if id.IsNull() || id.IsNaN() || id.IsUndefined() {
		return InvalidId(), false
	}
	return Id(SpaceType(space.Int()), IdType(id.Int())), true
}

func parseVec2(vec js.Value) (Vec2, bool) {
	result := NewVec2(0, 0)
	x := vec.Get("X")
	y := vec.Get("Y")

	if x.IsNull() || x.IsNaN() || x.IsUndefined() {
		return result, false
	}
	if y.IsNull() || y.IsNaN() || y.IsUndefined() {
		return result, false
	}
	result.X = x.Float()
	result.Y = y.Float()
	return result, true
}

// Key format: "1,3,4"
func parseKeysAsArray(keyStr string) []KeyType {
	keys := make([]KeyType, 0)
	for _, key := range(strings.Split(keyStr, ",")) {
		int, err := strconv.Atoi(key)
		if err != nil {
			continue
		}
		keys = append(keys, KeyType(int))
	}
	return keys
}

// Key format: "1:0,3:1,4:1"
func parseKeysAsProp(keyStr string) map[KeyType]bool {
	keys := make(map[KeyType]bool)
	parsedMap := parseStringMap(keyStr)

	for k, v := range(parsedMap) {
		if v == "1" {
			keys[KeyType(k)] = true
		} else {
			keys[KeyType(k)] = false
		}
	}
	return keys
}

// Attribute format: "1:0,3:1,4:1"
func parseAttributesAsProp(attributeStr string) map[AttributeType]bool {
	attributes := make(map[AttributeType]bool)
	parsedMap := parseStringMap(attributeStr)

	for k, v := range(parsedMap) {
		if _, ok := wasmIgnoreAttributes[AttributeType(k)]; ok {
			continue
		}

		if v == "1" {
			attributes[AttributeType(k)] = true
		} else {
			attributes[AttributeType(k)] = false
		}
	}
	return attributes
}

// Attribute format: "1:0,3:4,4:6"
func parseByteAttributesAsProp(attributeStr string) map[ByteAttributeType]uint8 {
	attributes := make(map[ByteAttributeType]uint8)
	parsedMap := parseStringMap(attributeStr)

	for k, v := range(parsedMap) {
		if _, ok := wasmIgnoreByteAttributes[ByteAttributeType(k)]; ok {
			continue
		}
		if int, err := strconv.Atoi(v); err == nil {
			attributes[ByteAttributeType(k)] = uint8(int)
		}
	}
	return attributes
}

func parseIntAttributesAsProp(attributeStr string) map[IntAttributeType]int {
	attributes := make(map[IntAttributeType]int)
	parsedMap := parseStringMap(attributeStr)

	for k, v := range(parsedMap) {
		if _, ok := wasmIgnoreIntAttributes[IntAttributeType(k)]; ok {
			continue
		}
		if int, err := strconv.Atoi(v); err == nil {
			attributes[IntAttributeType(k)] = int
		}
	}
	return attributes
}

func parseFloatAttributesAsProp(attributeStr string) map[FloatAttributeType]float64 {
	attributes := make(map[FloatAttributeType]float64)
	parsedMap := parseStringMap(attributeStr)

	for k, v := range(parsedMap) {
		if _, ok := wasmIgnoreFloatAttributes[FloatAttributeType(k)]; ok {
			continue
		}
		if float, err := strconv.ParseFloat(v, 64); err == nil {
			attributes[FloatAttributeType(k)] = float
		}
	}
	return attributes
}


func parseStringMap(stringMap string) map[int]string {
	resultMap := make(map[int]string)
	for _, entry := range(strings.Split(stringMap, ",")) {
		pair := strings.Split(entry, ":")

		if len(pair) != 2 {
			continue
		}

		key, err := strconv.Atoi(pair[0])
		if err != nil {
			fmt.Println("parseStringMap: ", err)
			continue
		}

		resultMap[key] = pair[1]
	}
	return resultMap
}